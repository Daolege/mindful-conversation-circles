
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://bwpvksvvcctthwnrurtr.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJ3cHZrc3Z2Y2N0dGh3bnJ1cnRyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDUxNjg2NDcsImV4cCI6MjA2MDc0NDY0N30.wUq0cKIjnvXUJ5LejKqf31OuiovWe0-aaOTott1KV_I";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

/**
 * 检查Supabase连接状态
 * @returns {Promise<boolean>} 连接状态，true表示连接成功
 */
export const checkSupabaseConnection = async (): Promise<boolean> => {
  try {
    // 尝试执行一个简单的查询来测试连接
    const { error } = await supabase
      .from('site_settings')
      .select('id')
      .limit(1);
    
    // 如果没有错误，则连接成功
    return !error;
  } catch (error) {
    console.error('Supabase 连接检查失败:', error);
    return false;
  }
};

/**
 * 使用演示账户登录
 * @returns {Promise<{success: boolean, message?: string}>} 登录结果
 */
export const loginWithDemoAccount = async (): Promise<{success: boolean, message?: string}> => {
  try {
    // 演示账户的邮箱和密码
    const demoEmail = 'demo@example.com';
    const demoPassword = 'demo123456';
    
    // 尝试登录
    const { data, error } = await supabase.auth.signInWithPassword({
      email: demoEmail,
      password: demoPassword
    });
    
    // 如果登录失败且错误是因为用户不存在，则尝试创建一个演示账户
    if (error && error.message.includes('Invalid login')) {
      // 尝试创建一个新的演示账户
      const { error: signUpError } = await supabase.auth.signUp({
        email: demoEmail,
        password: demoPassword,
        options: {
          data: {
            full_name: '演示用户',
            is_demo: true
          }
        }
      });
      
      // 如果创建成功，再次尝试登录
      if (!signUpError) {
        const { error: loginError } = await supabase.auth.signInWithPassword({
          email: demoEmail,
          password: demoPassword
        });
        
        if (loginError) {
          return {
            success: false,
            message: `创建演示账户后登录失败: ${loginError.message}`
          };
        }
        
        return { 
          success: true,
          message: '已创建并登录演示账户'
        };
      } else {
        return {
          success: false,
          message: `创建演示账户失败: ${signUpError.message}`
        };
      }
    }
    
    // 如果有其他错误
    if (error) {
      return {
        success: false,
        message: `登录失败: ${error.message}`
      };
    }
    
    // 登录成功
    return {
      success: true,
      message: '演示账户登录成功'
    };
  } catch (error: any) {
    console.error('演示账户登录过程中出错:', error);
    return {
      success: false,
      message: `登录过程出错: ${error.message || '未知错误'}`
    };
  }
};

/**
 * 创建模拟作业提交数据
 * @returns {Promise<{success: boolean, message?: string}>} 创建结果
 */
export const createMockHomeworkSubmissions = async (): Promise<{success: boolean, message?: string}> => {
  try {
    // 首先获取现有课程以便创建相关的作业提交
    const { data: courses, error: coursesError } = await supabase
      .from('courses')
      .select('id')
      .limit(3);
    
    if (coursesError) {
      return {
        success: false,
        message: `获取课程数据失败: ${coursesError.message}`
      };
    }
    
    if (!courses || courses.length === 0) {
      return {
        success: false,
        message: '没有找到可用的课程数据'
      };
    }
    
    // 获取现有作业
    let { data: existingHomework, error: homeworkError } = await supabase
      .from('homework')
      .select('id, lecture_id, course_id')
      .limit(5);
    
    if (homeworkError) {
      return {
        success: false,
        message: `获取作业数据失败: ${homeworkError.message}`
      };
    }
    
    // 如果没有现有作业，先创建一些模拟作业
    if (!existingHomework || existingHomework.length === 0) {
      const mockHomework = [];
      
      for (const course of courses) {
        // 为每个课程创建1-2个模拟作业
        const homeworkCount = Math.floor(Math.random() * 2) + 1;
        
        for (let i = 0; i < homeworkCount; i++) {
          mockHomework.push({
            course_id: course.id,
            lecture_id: `lecture-${course.id}-${i}`,
            title: `模拟作业 ${i+1} - 课程 ${course.id}`,
            description: `这是课程 ${course.id} 的第 ${i+1} 个模拟作业描述`,
            type: Math.random() > 0.5 ? 'text' : 'file',
            is_required: Math.random() > 0.3,
            created_at: new Date().toISOString()
          });
        }
      }
      
      // 插入模拟作业
      const { error: insertHomeworkError } = await supabase
        .from('homework')
        .insert(mockHomework);
      
      if (insertHomeworkError) {
        return {
          success: false,
          message: `创建模拟作业失败: ${insertHomeworkError.message}`
        };
      }
      
      // 重新获取作业数据
      const { data: refreshedHomework, error: refreshError } = await supabase
        .from('homework')
        .select('id, lecture_id, course_id')
        .limit(5);
      
      if (refreshError || !refreshedHomework || refreshedHomework.length === 0) {
        return {
          success: false,
          message: '创建模拟作业后无法获取作业数据'
        };
      }
      
      // 更新作业列表
      existingHomework = refreshedHomework;
    }
    
    // 模拟一些用户
    const mockUsers = [
      { id: '00000000-0000-0000-0000-000000000001', name: '张三' },
      { id: '00000000-0000-0000-0000-000000000002', name: '李四' },
      { id: '00000000-0000-0000-0000-000000000003', name: '王五' }
    ];
    
    // 创建模拟作业提交
    const mockSubmissions = [];
    
    // 为每个作业创建3条提交记录
    for (const homework of existingHomework) {
      for (const user of mockUsers) {
        // 随机决定是否为此用户创建此作业的提交
        if (Math.random() > 0.3) {
          mockSubmissions.push({
            homework_id: homework.id,
            user_id: user.id,
            course_id: homework.course_id,
            lecture_id: homework.lecture_id,
            answer: `这是${user.name}提交的作业答案，包含了详细的解答过程和结论。`,
            submitted_at: new Date(Date.now() - Math.floor(Math.random() * 7 * 24 * 60 * 60 * 1000)).toISOString() // 随机过去7天内的时间
          });
        }
      }
    }
    
    // 如果没有生成任何提交，创建至少一条
    if (mockSubmissions.length === 0 && existingHomework.length > 0) {
      const firstHomework = existingHomework[0];
      mockSubmissions.push({
        homework_id: firstHomework.id,
        user_id: mockUsers[0].id,
        course_id: firstHomework.course_id,
        lecture_id: firstHomework.lecture_id,
        answer: `这是一个示例作业提交答案。`,
        submitted_at: new Date().toISOString()
      });
    }
    
    // 插入模拟提交数据
    if (mockSubmissions.length > 0) {
      const { error: submissionError } = await supabase
        .from('homework_submissions')
        .insert(mockSubmissions);
      
      if (submissionError) {
        return {
          success: false,
          message: `创建模拟作业提交失败: ${submissionError.message}`
        };
      }
      
      return {
        success: true,
        message: `成功创建了 ${mockSubmissions.length} 条模拟作业提交数据`
      };
    } else {
      return {
        success: false,
        message: '没有创建任何模拟作业提交数据'
      };
    }
  } catch (error: any) {
    console.error('创建模拟作业提交数据时出错:', error);
    return {
      success: false,
      message: `创建模拟数据出错: ${error.message || '未知错误'}`
    };
  }
};
